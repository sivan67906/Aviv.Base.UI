@inject StateService stateService
@inject IJSRuntime JSRuntime

<header class="app-header">

    <!-- Start::main-header-container -->
    <div class="main-header-container container-fluid">

        <!-- Start::header-content-left -->
        <div class="header-content-left">

            <!-- Start::header-element -->
            <div class="header-element">
                <div class="horizontal-logo">
                    <h3 class="toggle-logo"><span class="text-primary">O</span><span class="text-warning">S</span></h3>
                </div>
            </div>
            <!-- End::header-element -->
            <!-- Start::header-element -->
            <div class="header-element">
                <!-- Start::header-link -->
                <a aria-label="Hide Sidebar" @onclick="ToggleMenu" class="sidemenu-toggle header-link animated-arrow hor-toggle horizontal-navtoggle" data-bs-toggle="sidebar" href="javascript:void(0);"><span></span></a>
                <!-- End::header-link -->
            </div>
            <!-- End::header-element -->

        </div>
        <!-- End::header-content-left -->
        <!-- Start::header-content-right -->
        <div class="header-content-right">


            <!-- Start::header-element -->
            <div class="header-element header-theme-mode" @onclick='() => colorthemeFn()'>
                <!-- Start::header-link|layout-setting -->
                <a href="javascript:void(0);" class="header-link layout-setting">
                    <span class="light-layout">
                        <!-- Start::header-link-icon -->
                        <i class="bx bx-moon header-link-icon"></i>
                        <!-- End::header-link-icon -->
                    </span>
                    <span class="dark-layout">
                        <!-- Start::header-link-icon -->
                        <i class="bx bx-sun header-link-icon"></i>
                        <!-- End::header-link-icon -->
                    </span>
                </a>
                <!-- End::header-link|layout-setting -->
            </div>
            <!-- End::header-element -->
            <!-- Start::header-element -->
            <div class="header-element header-fullscreen">
                <!-- Start::header-link -->
                <a onclick="openFullscreen();" href="javascript:void(0);" class="header-link">
                    <i class="bx bx-fullscreen full-screen-open header-link-icon"></i>
                    <i class="bx bx-exit-fullscreen full-screen-close header-link-icon d-none"></i>
                </a>
                <!-- End::header-link -->
            </div>
            <!-- End::header-element -->
            <!-- Start::header-element -->
            <div class="header-element">
                <!-- Start::header-link|dropdown-toggle -->
                <a href="javascript:void(0);" class="header-link dropdown-toggle" id="mainHeaderProfile" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                    <div class="d-flex align-items-center">
                        <div class="me-sm-2 me-0">
                            <img src="../assets/images/faces/9.jpg" alt="img" width="32" height="32" class="rounded-circle">
                        </div>
                        <div class="d-sm-block d-none">
                            <p class="fw-semibold mb-0 lh-1">Eli Ya`aqov</p>
                            <span class="op-7 fw-normal d-block fs-11">Vendor Admin</span>
                        </div>
                    </div>
                </a>
                <!-- End::header-link|dropdown-toggle -->
                <ul class="main-header-dropdown dropdown-menu pt-0 overflow-hidden header-profile-dropdown dropdown-menu-end" aria-labelledby="mainHeaderProfile">
                    <li><a class="dropdown-item d-flex" href="Vendors/Profile"><i class="ti ti-user-circle fs-18 me-2 op-7"></i>Profile</a></li>
                    <li><a class="dropdown-item d-flex" href="ResetPassword"><i class="ti ti-lock fs-18 me-2 op-7"></i>Change Password</a></li>
                    <li><a class="dropdown-item d-flex" href="mail"><i class="ti ti-inbox fs-18 me-2 op-7"></i>Stock <span class="badge bg-success-transparent ms-auto">25</span></a></li>
                    <li><a class="dropdown-item d-flex border-block-end" href="to-do-list"><i class="ti ti-clipboard-check fs-18 me-2 op-7"></i>Product Manager</a></li>
                    <li><a class="dropdown-item d-flex" href="chat"><i class="ti ti-headset fs-18 me-2 op-7"></i>Support</a></li>
                    <li><a class="dropdown-item d-flex" href="FAQ"><i class="ti ti-receipt fs-18 me-2 op-7"></i>FAQ</a></li>
                    <li><a class="dropdown-item d-flex" href=""><i class="ti ti-logout fs-18 me-2 op-7"></i>Log Out</a></li>
                </ul>
            </div>
            <!-- End::header-element -->

        </div>
        <!-- End::header-content-right -->

    </div>
    <!-- End::main-header-container -->

</header>


<!-- cart Data Start-->
@code {
    public class CartList
    {
        public int id { get; set; }
        public string? img { get; set; }
        public string? title { get; set; }
        public List<Category>? categoryList { get; set; }
        public string? price { get; set; }
    }
    public class Category
    {
        public string? value { get; set; }
        public string? valueBgColor { get; set; }
    }

    List<CartList> CartListData = new List<CartList>()
    {
        new CartList {
            id = 1,
            img = "assets/images/ecommerce/jpg/1.jpg",
            title = "SomeThing Phone",
            categoryList = new List<Category> {
                new Category { value = "Metallic Blue", valueBgColor = ""},
                new Category { value = "6gb Ram", valueBgColor = ""},
            },
            price = "1,299.00"
        },
        new CartList {
            id= 2,
            img= "assets/images/ecommerce/jpg/3.jpg",
            title= "Stop Watch",
            categoryList = new List<Category> {
                new Category { value= "6gb Ram", valueBgColor= "" },
                new Category { value= "Free shipping", valueBgColor= "bg-pink-transparent" },
            },
            price= "179.29"
        },
        new CartList {
            id= 3,
            img= "assets/images/ecommerce/jpg/5.jpg",
            title= "Photo Frame",
            categoryList = new List<Category> {
                 new Category { value= "Decorative", valueBgColor= "" }
            },
            price= "29.00"
        },
        new CartList {
            id= 4,
            img= "assets/images/ecommerce/jpg/4.jpg",
            title= "Kikon Camera",
            categoryList = new List<Category> {
                 new Category { value= "Black", valueBgColor= "" },
                 new Category { value= "50MM", valueBgColor= "" },
            },
            price= "4,999.00"
        },
        new CartList {
            id= 5,
            img= "assets/images/ecommerce/jpg/6.jpg",
            title= "Canvas Shoes",
            categoryList = new List<Category> {
                new Category { value= "Gray", valueBgColor= "" },
                 new Category { value= "Sports", valueBgColor= "" },
            },
            price= "129.00"
        },
    };

    void DeleteCartlist(CartList CartList)
    {
        CartListData.Remove(CartList);
    }
}

<!-- cart Data End-->
<!-- Notifications Data Start-->
@code {
    public class NotifyList
    {
        public int id { get; set; }
        public string? icon { get; set; }
        public string? iconBg { get; set; }
        public string? title { get; set; }
        public string? description { get; set; }
    }

    List<NotifyList> NotifyListData = new List<NotifyList>()
    {
        new NotifyList { id= 1, icon= "ti ti-gift", iconBg= "bg-primary-transparent", title= "Your Order Has Been Shipped", description= "Order No= 123456 Has Shipped To Your Delivery Address" },
        new NotifyList { id= 2, icon= "ti ti-discount-2", iconBg= "bg-secondary-transparent", title= "Discount Available", description= "Discount Available On Selected Products" },
        new NotifyList { id= 3, icon= "ti ti-user-check", iconBg= "bg-pink-transparent", title= "Account Has Been Verified", description= "Your Account Has Been Verified Sucessfully" },
        new NotifyList { id= 4, icon= "ti ti-circle-check", iconBg= "bg-warning-transparent", title= "Order Placed ID= #1116773", description= "Order Placed Successfully" },
        new NotifyList { id= 5, icon= "ti ti-clock", iconBg= "bg-success-transparent", title= "Order Delayed ID= 7731116", description= "Order Delayed Unfortunately" },
    };

    void DeleteNotifyList(NotifyList NotifyList)
    {
        NotifyListData.Remove(NotifyList);
    }
}

<!-- Notifications Data End-->
@code {
    private async void ToggleMenu()
    {
        var toggled = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-toggled");
        var verticalStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-vertical-style");
        var navStyle = await JSRuntime.InvokeAsync<string>("interop.getAttributeToHtml", "data-nav-style");
        var isdoubleMenuActive = await JSRuntime.InvokeAsync<bool>("interop.isEleExist", ".double-menu-active");
        var inner = await JSRuntime.InvokeAsync<int>("interop.inner", "innerWidth");

        if (inner <= 992)
        {
            if (toggled == "open")
            {
                await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "close");
            }
            else
            {
                await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "open");
            }
        }
        else
        {
            if (navStyle != null)
            {
                if (toggled != null)
                {
                    await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-toggled");
                }
                else
                {
                    await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", navStyle + "-closed");
                }
            }
            else if (verticalStyle != null)
            {
                if (verticalStyle == "doublemenu")
                {
                    if (toggled == "double-menu-open" && isdoubleMenuActive)
                    {
                        await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-close");
                    }
                    else
                    {
                        if (isdoubleMenuActive)
                        {
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-open");
                        }
                    }
                }
                else if (toggled != null)
                {
                    await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-toggled");
                }
                else
                {
                    switch (verticalStyle)
                    {
                        case "closed":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "close-menu-close");
                            break;
                        case "icontext":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "icon-text-close");
                            break;
                        case "overlay":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "icon-overlay-close");
                            break;
                        case "detached":
                            await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "detached-close");
                            break;
                    }
                }
            }
        }
    }

    private AppState currentState => stateService.GetAppState();
    private async void colorthemeFn()
    {
        var val = currentState.ColorTheme == "light" ? "dark" : "light";
        await JSRuntime.InvokeAsync<string>("interop.setLocalStorageItem", "ynexcolortheme", val);
        await stateService.colorthemeFn(val, true);
    }
}