@inject StateService stateService
@inject IJSRuntime JSRuntime

<header class="app-header">
	<div class="main-header-container container-fluid">
		<!-- Header Left Side -->
		<div class="header-content-left">
			<div class="header-element">
				<div class="horizontal-logo">
					<h3 class="toggle-logo"><span class="text-primary">O</span><span class="text-warning">S</span></h3>
				</div>
			</div>
			<div class="header-element">
				<a aria-label="Toggle Sidebar" @onclick="ToggleMenu" class="sidemenu-toggle header-link animated-arrow hor-toggle horizontal-navtoggle" href="javascript:void(0);">
					<span></span>
				</a>
			</div>
		</div>

		<!-- Header Right Side -->
		<div class="header-content-right">
			<!-- Theme Toggle -->
			<div class="header-element header-theme-mode" @onclick="ToggleTheme">
				<a href="javascript:void(0);" class="header-link layout-setting">
					<span class="light-layout"><i class="bx bx-moon header-link-icon"></i></span>
					<span class="dark-layout"><i class="bx bx-sun header-link-icon"></i></span>
				</a>
			</div>

			<!-- Fullscreen Toggle -->
			<div class="header-element header-fullscreen">
				<a onclick="openFullscreen();" href="javascript:void(0);" class="header-link">
					<i class="bx bx-fullscreen full-screen-open header-link-icon"></i>
					<i class="bx bx-exit-fullscreen full-screen-close header-link-icon d-none"></i>
				</a>
			</div>

			<!-- User Profile Dropdown -->
			<div class="header-element">
				<a href="javascript:void(0);" class="header-link dropdown-toggle" id="mainHeaderProfile" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
					<div class="d-flex align-items-center">
						<div class="me-sm-2 me-0">
							<img src="../assets/images/faces/9.jpg" alt="Profile" width="32" height="32" class="rounded-circle">
						</div>
						<div class="d-sm-block d-none">
							<p class="fw-semibold mb-0 lh-1">Eli Ya`aqov</p>
							<span class="op-7 fw-normal d-block fs-11">Vendor Admin</span>
						</div>
					</div>
				</a>
				<ul class="main-header-dropdown dropdown-menu pt-0 overflow-hidden header-profile-dropdown dropdown-menu-end" aria-labelledby="mainHeaderProfile">
					<li><a class="dropdown-item d-flex" href="Vendors/Profile"><i class="ti ti-user-circle fs-18 me-2 op-7"></i>Profile</a></li>
					<li><a class="dropdown-item d-flex" href="ResetPassword"><i class="ti ti-lock fs-18 me-2 op-7"></i>Change Password</a></li>
					<li><a class="dropdown-item d-flex" href="mail"><i class="ti ti-inbox fs-18 me-2 op-7"></i>Stock <span class="badge bg-success-transparent ms-auto">25</span></a></li>
					<li><a class="dropdown-item d-flex border-block-end" href="to-do-list"><i class="ti ti-clipboard-check fs-18 me-2 op-7"></i>Product Manager</a></li>
					<li><a class="dropdown-item d-flex" href="chat"><i class="ti ti-headset fs-18 me-2 op-7"></i>Support</a></li>
					<li><a class="dropdown-item d-flex" href="FAQ"><i class="ti ti-receipt fs-18 me-2 op-7"></i>FAQ</a></li>
					<li><a class="dropdown-item d-flex" href=""><i class="ti ti-logout fs-18 me-2 op-7"></i>Log Out</a></li>
				</ul>
			</div>
		</div>
	</div>
</header>

@code {
	private AppState CurrentState => stateService.GetAppState();

	private async void ToggleTheme()
	{
		var val = CurrentState.ColorTheme == "light" ? "dark" : "light";
		await JSRuntime.InvokeAsync<string>("interop.setLocalStorageItem", "ynexcolortheme", val);
		await stateService.colorthemeFn(val, true);
	}

	private async void ToggleMenu()
	{
		try
		{
			// Get all required attributes in a single call to reduce JS interop overhead
			var attributes = await JSRuntime.InvokeAsync<Dictionary<string, string>>(
				"interop.getMultipleAttributes",
				new object[] { new[] { "data-toggled", "data-vertical-style", "data-nav-style" } }
			);

			var toggled = attributes.GetValueOrDefault("data-toggled", "");
			var verticalStyle = attributes.GetValueOrDefault("data-vertical-style", "");
			var navStyle = attributes.GetValueOrDefault("data-nav-style", "");

			// Get additional values separately as needed
			var isdoubleMenuActive = await JSRuntime.InvokeAsync<bool>("interop.isEleExist", ".double-menu-active");
			var inner = await JSRuntime.InvokeAsync<int>("interop.inner", "innerWidth");

			if (inner <= 992)
			{
				// Mobile view toggle logic - simplified
				await JSRuntime.InvokeAsync<string>(
					"interop.addAttributeToHtml",
					"data-toggled",
					toggled == "open" ? "close" : "open"
				);
				return;
			}

			// Desktop view toggles
			if (navStyle != null && !string.IsNullOrEmpty(navStyle))
			{
				await HandleNavStyleToggle(toggled, navStyle);
			}
			else if (verticalStyle != null && !string.IsNullOrEmpty(verticalStyle))
			{
				await HandleVerticalStyleToggle(verticalStyle, toggled, isdoubleMenuActive);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error in ToggleMenu: {ex.Message}");
		}
	}

	private async Task HandleNavStyleToggle(string toggled, string navStyle)
	{
		if (toggled != null && !string.IsNullOrEmpty(toggled))
		{
			await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-toggled");
		}
		else
		{
			await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", navStyle + "-closed");
		}
	}

	private async Task HandleVerticalStyleToggle(string verticalStyle, string toggled, bool isdoubleMenuActive)
	{
		if (verticalStyle == "doublemenu")
		{
			await HandleDoubleMenuToggle(toggled, isdoubleMenuActive);
		}
		else
		{
			await HandleStandardVerticalToggle(verticalStyle, toggled);
		}
	}

	private async Task HandleDoubleMenuToggle(string toggled, bool isdoubleMenuActive)
	{
		if (toggled == "double-menu-open" && isdoubleMenuActive)
		{
			await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-close");
		}
		else if (toggled == "double-menu-close")
		{
			await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-toggled");
		}
		else if (isdoubleMenuActive)
		{
			await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", "double-menu-open");
		}
	}

	private async Task HandleStandardVerticalToggle(string verticalStyle, string toggled)
	{
		string expectedCloseState = GetCloseStateForStyle(verticalStyle);

		if (toggled != null && !string.IsNullOrEmpty(toggled))
		{
			await JSRuntime.InvokeAsync<string>("interop.removeAttributeFromHtml", "data-toggled");
		}
		else
		{
			await JSRuntime.InvokeAsync<string>("interop.addAttributeToHtml", "data-toggled", expectedCloseState);
		}
	}

	// Helper method to get the close state for a given vertical style
	private string GetCloseStateForStyle(string verticalStyle)
	{
		return verticalStyle switch
		{
			"closed" => "close-menu-close",
			"icontext" => "icon-text-close",
			"overlay" => "icon-overlay-close",
			"detached" => "detached-close",
			_ => "close"
		};
	}
}