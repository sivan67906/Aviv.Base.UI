@inject MenuDataService MenuDataService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject StateService stateService

@if (menuData != null && menuData.Children != null && menuData.Children.Any())
{
	<a data-id="@menuData.RandomNumber"
	   href="javascript:void(0);"
	   class="@GetSubmenuClasses()"
	   @onclick="TriggerSubmenuToggle">

		@if (Level == 1)
		{
			@if (!string.IsNullOrEmpty(menuData.svgIcon))
			{
				@((MarkupString)menuData.svgIcon)
			}
			else
			{
				<i class="@(menuData.Icon) side-menu__icon"></i>
			}
		}

		<span class="@(Level == 1 ? "side-menu__label" : "") text-truncate">
			@menuData.Title
			@if (!string.IsNullOrEmpty(menuData.BadgeValue))
			{
				<span class="badge @(menuData.BadgeClass) ms-1">@menuData.BadgeValue</span>
			}
		</span>

		<i class="fa fa-chevron-right side-menu__angle"></i>
	</a>

	<ul class="slide-menu @($"child{Level}") @(menuData.Active ? "double-menu-active" : "") @(menuData.DirChange ? "force-left" : "")"
		style="display: @(menuData.Active ? "block" : "none")">

		@if (Level <= 1)
		{
			<li class="slide side-menu__label1">
				<a href="javascript:void(0)">@menuData.Title</a>
			</li>
		}

		@foreach (var menuItem in menuData.Children)
		{
			<li class="@GetMenuItemClasses(menuItem)">
				@if (menuItem.Type == "link")
				{
					<a href="@menuItem.Path"
					   class="side-menu__item @(menuItem.Selected ? "active" : "")"
					   @onclick="() => NavigateToItem(menuItem)"
					@onclick:preventDefault>
						@menuItem.Title
						@if (!string.IsNullOrEmpty(menuItem.BadgeValue))
						{
							<span class="badge @(menuItem.BadgeClass) ms-1">@menuItem.BadgeValue</span>
						}
					</a>
				}
				else if (menuItem.Type == "external")
				{
					<a href="@menuItem.Path" target="_blank" class="side-menu__item">
						@menuItem.Title
						@if (!string.IsNullOrEmpty(menuItem.BadgeValue))
						{
							<span class="badge @(menuItem.BadgeClass) ms-1">@menuItem.BadgeValue</span>
						}
					</a>
				}
				else if (menuItem.Type == "empty")
				{
					<a href="javascript:void(0);" class="side-menu__item">
						@menuItem.Title
						@if (!string.IsNullOrEmpty(menuItem.BadgeValue))
						{
							<span class="badge @(menuItem.BadgeClass) ms-1">@menuItem.BadgeValue</span>
						}
					</a>
				}
				else if (menuItem.Type == "sub")
				{
					<SubNavMenu menuData="@menuItem"
								OnToggleSubmenu="@OnToggleSubmenu"
								OnSetSubmenu="@OnSetSubmenu"
								Level="@(Level + 1)" />
				}
			</li>
		}
	</ul>
}

@code {
	[Parameter] public MainMenuItems? menuData { get; set; }

	[Parameter] public EventCallback<(MainMenuItems, MainMenuItems[])> OnToggleSubmenu { get; set; }

	[Parameter] public EventCallback<(MainMenuItems, MainMenuItems[])> OnSetSubmenu { get; set; }

	[Parameter] public int Level { get; set; }

	private async Task TriggerSubmenuToggle()
	{
		if (menuData == null) return;

		await OnToggleSubmenu.InvokeAsync((menuData, Array.Empty<MainMenuItems>()));
	}

	private async Task NavigateToItem(MainMenuItems menuItem)
	{
		// Check for specific menu items that should trigger theme changes
		if (menuItem.Title == "Product Manager")
		{
			await stateService.SwitchThemePreset("product_manager");
		}
		else if (menuItem.Title == "Support")
		{
			await stateService.SwitchThemePreset("support");
		}
		else if (menuItem.Title == "Back to Main")
		{
			await stateService.SwitchThemePreset("default");
		}
		// Add more conditions for other menu items as needed

		await OnSetSubmenu.InvokeAsync((menuItem, Array.Empty<MainMenuItems>()));
		Navigation.NavigateTo(menuItem.Path);
	}

	private string GetSubmenuClasses()
	{
		var classes = new List<string> { "side-menu__item", "text-truncate" };

		if (menuData?.DirChange == true)
		{
			classes.Add("force-left");
		}

		if (menuData?.Selected == true)
		{
			classes.Add("active");
		}

		return string.Join(" ", classes);
	}

	private string GetMenuItemClasses(MainMenuItems menuItem)
	{
		var classes = new List<string>();

		if (!string.IsNullOrEmpty(menuItem.MenuTitle))
		{
			classes.Add("slide__category");
		}

		if (menuItem.Type == "empty" || menuItem.Type == "link" ||
			menuItem.Type == "sub" || menuItem.Type == "external")
		{
			classes.Add("slide");
		}

		if (menuItem.Type == "sub")
		{
			classes.Add("has-sub");
		}

		if (menuItem.Active)
		{
			classes.Add("open");
		}

		if (menuItem.Selected)
		{
			classes.Add("active");
		}

		return string.Join(" ", classes);
	}
}