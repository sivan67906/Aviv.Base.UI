@page "/ServiceBasedDetail"
@using Aviv.Base.UI.Models
@using Aviv.Base.UI.Services
@using Radzen
@using Radzen.Blazor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Aviv.Base.UI.Components
@inject ServiceBasedDetailInfoService ServiceDetailService
@inject IJSRuntime JSRuntime
@inject PageBreadcrumbService BreadcrumbService
@inject NotificationCustomService NotificationService



<div class="container-fluid">
	<!-- Add the notification component -->
	<NotificationComponent />

	<div class="row">
		<div class="col-xl-12">
			<div class="card custom-card">
				<div class="card-header d-flex align-items-center justify-content-between flex-wrap gap-3">
					<div class="card-title">
						Service-Based Vendor Details
						@if (count > 0)
						{
							<span class="badge bg-success text-white rounded ms-1 fs-12 align-middle">@count</span>
						}
						else
						{
							<span class="badge bg-light text-default rounded ms-1 fs-12 align-middle">@count</span>
						}
					</div>
					<div class="d-flex align-items-center">
						<div class="position-relative me-2">
							<input type="text" class="form-control bg-light border-0" style="line-height: 0.6 !important;" placeholder="Search services..." @bind="searchText" @bind:event="oninput" @onkeyup="HandleSearch" />
							<button class="btn btn-sm position-absolute end-0 top-0 bottom-0 bg-transparent border-0" type="button" @onclick="HandleSearch">
								<i class="ri-search-line text-muted"></i>
							</button>
						</div>
						<button class="btn btn-sm btn-primary" type="button" @onclick="OpenCreateModal">
							<i class="ri-add-line me-1 fw-semibold align-middle"></i>Add Service Details
						</button>
					</div>
				</div>
				<div class="card-body">
					<RadzenDataGrid @ref="grid"
									Data="@serviceDetails"
									TItem="ServiceBasedDetail"
									LoadData="@LoadData"
									Count="@count"
									AllowAlternatingRows="false"
									AllowPaging="true"
									PageSize="10"
									PagerHorizontalAlign="Radzen.HorizontalAlign.Center"
									ShowPagingSummary="false"
									PageSizeOptions="@(new int[] {5, 10, 20})">
						<Columns>
							<RadzenDataGridColumn TItem="ServiceBasedDetail" Property="Service_Name" Title="Service Name" Width="180px" />
							<RadzenDataGridColumn TItem="ServiceBasedDetail" Property="Type_of_Services_Provided" Title="Service Type" Width="180px" />
							<RadzenDataGridColumn TItem="ServiceBasedDetail" Property="Average_Service_Turnaround_Time" Title="Turnaround Time" Width="160px" />
							<RadzenDataGridColumn TItem="ServiceBasedDetail" Property="Has_Certifications" Title="Certifications" Width="130px" TextAlign="Radzen.TextAlign.Center">
								<Template Context="detail">
									@if (detail.Has_Certifications)
									{
										<i class="ri-file-cert-line text-success" title="Has certifications"></i>
									}
									else
									{
										<i class="ri-file-list-line text-muted" title="No certifications"></i>
									}
								</Template>
							</RadzenDataGridColumn>
							<RadzenDataGridColumn TItem="ServiceBasedDetail" Title="Action" Width="150px" TextAlign="Radzen.TextAlign.Center">
								<Template Context="detail">
									<div class="btn-list">
										<button class="btn btn-sm btn-warning-light" @onclick="() => OpenViewDetails(detail)">
											<i class="ri-eye-line"></i>
										</button>
										<button class="btn btn-sm btn-info-light" @onclick="() => OpenEditModal(detail)">
											<i class="ri-pencil-line"></i>
										</button>
										<button class="btn btn-sm btn-danger-light btn-icon contact-delete" @onclick="() => ConfirmDelete(detail)">
											<i class="ri-delete-bin-line"></i>
										</button>
									</div>
								</Template>
							</RadzenDataGridColumn>
						</Columns>
					</RadzenDataGrid>
				</div>
			</div>
		</div>
	</div>
</div>

@if (showModal)
{
	<div class="modal fade show" id="editServiceDetail" tabindex="-1" style="display:block;" aria-modal="true" role="dialog">
		<div class="modal-dialog">
			<EditForm Model="@currentDetail" OnValidSubmit="HandleValidSubmit">
				<DataAnnotationsValidator />
				@* <ValidationSummary /> *@
				<div class="modal-content">
					<div class="modal-header">
						<h6 class="modal-title">@modalTitle</h6>
					</div>
					<div class="modal-body px-4">
						<div class="row">
							<div class="col-md-12 mb-3">
								<label class="form-label" for="serviceName">Service Name</label>
								<InputText id="serviceName" @bind-Value="currentDetail.Service_Name" class="form-control" placeholder="Enter service name" />
								<ValidationMessage For="@(() => currentDetail.Service_Name)" />
							</div>
						</div>

						<div class="row">
							<div class="col-md-12 mb-3">
								<label class="form-label" for="serviceType">Type of Services Provided</label>
								<SfDropDownList TItem="string" TValue="string"
												Value="@currentDetail.Type_of_Services_Provided"
												ValueChanged="@(val => currentDetail.Type_of_Services_Provided = val)"
												DataSource="@serviceTypes"
												Placeholder="Select service type"
												AllowFiltering="true">
								</SfDropDownList>
								<ValidationMessage For="@(() => currentDetail.Type_of_Services_Provided)" />
							</div>
						</div>

						<div class="row">
							<div class="col-md-12 mb-3">
								<label class="form-label" for="turnaroundTime">Average Service Turnaround Time</label>
								<SfDropDownList TItem="string" TValue="string"
												Value="@currentDetail.Average_Service_Turnaround_Time"
												ValueChanged="@(val => currentDetail.Average_Service_Turnaround_Time = val)"
												DataSource="@turnaroundTimes"
												Placeholder="Select turnaround time"
												AllowFiltering="true">
								</SfDropDownList>
								<ValidationMessage For="@(() => currentDetail.Average_Service_Turnaround_Time)" />
							</div>
						</div>

						<div class="row">
							<div class="col-md-12 mb-3">
								<label class="form-label" for="certifications">Certifications or Awards</label>
								<InputFile id="certifications" OnChange="HandleFileSelection" class="form-control" accept=".pdf,.jpg,.jpeg,.png,.doc,.docx" />
								<small class="text-muted">Accepted file types: PDF, JPG, JPEG, PNG, DOC, DOCX. Maximum file size: 5MB</small>

								@if (!string.IsNullOrEmpty(currentDetail.Certification_Filename))
								{
									<div class="mt-2 d-flex align-items-center">
										<i class="ri-file-line me-2"></i>
										<span>@currentDetail.Certification_Filename</span>
										<button type="button" class="btn btn-sm btn-outline-danger ms-2" @onclick="RemoveSelectedFile">
											<i class="ri-delete-bin-line"></i>
										</button>
									</div>
								}
							</div>
						</div>
					</div>

					<div class="modal-footer">
						<button type="button" class="btn btn-sm btn-light" @onclick="CloseModal">Cancel</button>
						<button type="submit" class="btn btn-sm btn-primary">@(isEdit ? "Update" : "Create")</button>
					</div>
				</div>
			</EditForm>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@if (showOffcanvas)
{
	<!-- View Details Offcanvas -->
	<div class="offcanvas offcanvas-end @(showOffcanvas ? "show" : "")" tabindex="-1" id="viewDetailsOffcanvas" aria-modal="true" role="dialog">
		@if (viewDetail != null)
		{
			<div class="offcanvas-header">
				<h5 class="offcanvas-title">Service Detail Information</h5>
				<button type="button" class="btn-close text-reset" @onclick="CloseOffcanvas"></button>
			</div>
			<div class="offcanvas-body">
				<div class="d-flex align-items-center mb-4">
					<div class="avatar avatar-lg bg-primary-transparent rounded-circle">
						<i class="ri-service-line fs-18 text-primary"></i>
					</div>
					<div class="ms-3">
						<h5 class="mb-0 fw-semibold">@viewDetail.Service_Name</h5>
						<span class="text-muted fs-12">@viewDetail.Type_of_Services_Provided</span>
					</div>
				</div>

				<div class="card custom-card mb-3">
					<div class="card-header">
						<div class="card-title">Service Details</div>
					</div>
					<div class="card-body">
						<div class="d-flex align-items-center mb-3">
							<div class="avatar avatar-sm bg-light me-2">
								<i class="ri-time-line text-primary"></i>
							</div>
							<div>
								<span class="fs-14 fw-semibold">Turnaround Time</span>
								<p class="mb-0 text-muted">@viewDetail.Average_Service_Turnaround_Time</p>
							</div>
						</div>

						<div class="d-flex align-items-center">
							<div class="avatar avatar-sm bg-light me-2">
								<i class="ri-award-line text-primary"></i>
							</div>
							<div>
								<span class="fs-14 fw-semibold">Certifications</span>
								@if (viewDetail.Has_Certifications && !string.IsNullOrEmpty(viewDetail.Certification_Filename))
								{
									<div class="d-flex align-items-center mt-1">
										<i class="ri-file-text-line me-1"></i>
										<span class="text-muted">@viewDetail.Certification_Filename</span>
									</div>
								}
								else
								{
									<p class="mb-0 text-muted">No certifications uploaded</p>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
	<div class="offcanvas-backdrop fade @(showOffcanvas ? "show" : "d-none")"></div>
}

@code {
	private List<ServiceBasedDetail> serviceDetails = new List<ServiceBasedDetail>();
	private RadzenDataGrid<ServiceBasedDetail> grid;
	private int count;
	private bool isLoading = false;
	private string searchText = "";

	// Modal related properties
	private bool showModal = false;
	private string modalTitle = "";
	private ServiceBasedDetail currentDetail = new ServiceBasedDetail();
	private bool isEdit = false;

	// Offcanvas related properties
	private bool showOffcanvas = false;
	private ServiceBasedDetail viewDetail;

	// File upload
	private IBrowserFile selectedFile;
	private long maxFileSize = 5 * 1024 * 1024; // 5MB

	// Dropdown data sources
	private List<string> serviceTypes = new List<string>
	{
		"Consulting",
		"Repair",
		"Installation",
		"Logistics",
		"Warehousing",
		"Quality Inspection",
		"Maintenance",
		"Technical Support",
		"Training",
		"Research & Development"
	};

	private List<string> turnaroundTimes = new List<string>
	{
		"24 Hours",
		"2-3 Days",
		"More than 3 Days",
		"Custom Agreement"
	};

	protected override async Task OnInitializedAsync()
	{
		BreadcrumbService.SetBreadcrumbPath(
			"Service-Based Vendor Details",
			("Home", "/"),
			("Service-Based Vendor Details", "/Vendors/ServiceBasedDetail")
		);

		await base.OnInitializedAsync();

		// Load initial data
		await LoadInitialData();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Initialize notification service
			await NotificationService.InitializeAsync();

			// Show info toast for loading
			await NotificationService.ShowInfoAsync("Loading service details...");
		}
	}

	private async Task LoadInitialData()
	{
		isLoading = true;
		try
		{
			// Show loading notification
			await NotificationService.ShowLineToastAsync("info");

			// Get initial data from service instead of using mock data
			serviceDetails = (await ServiceDetailService.GetServiceDetailsAsync(0, 10)).ToList();
			count = await ServiceDetailService.GetServiceDetailsCountAsync();

			// Show success notification
			await NotificationService.ShowSuccessAsync($"Successfully loaded {count} service details");
		}
		catch (Exception ex)
		{
			await NotificationService.ShowErrorAsync($"Error loading data: {ex.Message}", true);
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

	private async Task LoadData(LoadDataArgs args)
	{
		isLoading = true;
		try
		{
			// Show loading notification
			await NotificationService.ShowLineToastAsync("info");

			// Get data from service with pagination and filtering
			serviceDetails = (await ServiceDetailService.GetServiceDetailsAsync(
				args.Skip ?? 0,
				args.Top ?? 10,
				searchText
			)).ToList();

			// Get total count for pagination
			count = await ServiceDetailService.GetServiceDetailsCountAsync(searchText);

			// Show success notification if search is applied
			if (!string.IsNullOrEmpty(searchText))
			{
				await NotificationService.ShowInfoAsync($"Found {count} results for '{searchText}'");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading data: {ex.Message}");
			await NotificationService.ShowErrorAsync($"Error loading data: {ex.Message}", true);
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

	private async Task HandleSearch()
	{
		// Show loading notification
		await NotificationService.ShowLineToastAsync("info");

		await grid.Reload();
	}

	private async Task OpenCreateModal()
	{
		// Show loading notification
		await NotificationService.ShowLineToastAsync("info");

		modalTitle = "Add Service Detail";
		currentDetail = new ServiceBasedDetail
			{
				Service_Name = string.Empty,
				Type_of_Services_Provided = string.Empty,
				Average_Service_Turnaround_Time = string.Empty,
				Certification_Filename = string.Empty
			};
		isEdit = false;
		selectedFile = null;
		showModal = true;

		await NotificationService.ShowInfoAsync("Creating new service detail");
	}

	private async Task OpenEditModal(ServiceBasedDetail detail)
	{
		// Show loading notification
		await NotificationService.ShowLineToastAsync("info");

		modalTitle = "Edit Service Detail";
		currentDetail = new ServiceBasedDetail
			{
				Id = detail.Id,
				Service_Name = detail.Service_Name,
				Type_of_Services_Provided = detail.Type_of_Services_Provided,
				Average_Service_Turnaround_Time = detail.Average_Service_Turnaround_Time,
				Certification_Filename = detail.Certification_Filename,
				Has_Certifications = detail.Has_Certifications
			};
		isEdit = true;
		selectedFile = null;
		showModal = true;

		await NotificationService.ShowInfoAsync($"Editing '{detail.Service_Name}' service detail");
	}

	private void CloseModal()
	{
		showModal = false;
	}

	private async Task OpenViewDetails(ServiceBasedDetail detail)
	{
		// Show loading notification
		await NotificationService.ShowLineToastAsync("info");

		viewDetail = detail;
		showOffcanvas = true;

		await NotificationService.ShowInfoAsync($"Viewing details for: {detail.Service_Name}");
	}

	private void CloseOffcanvas()
	{
		showOffcanvas = false;
	}

	private async Task HandleFileSelection(InputFileChangeEventArgs e)
	{
		try
		{
			// Show processing notification
			await NotificationService.ShowLineToastAsync("info");

			selectedFile = e.File;

			if (selectedFile != null)
			{
				// Check file size
				if (selectedFile.Size > maxFileSize)
				{
					await NotificationService.ShowErrorAsync("File size exceeds the 5MB limit.", true);
					selectedFile = null;
					return;
				}

				// Check file type
				string extension = Path.GetExtension(selectedFile.Name).ToLowerInvariant();
				string[] allowedExtensions = { ".pdf", ".jpg", ".jpeg", ".png", ".doc", ".docx" };

				if (!allowedExtensions.Contains(extension))
				{
					await NotificationService.ShowWarningAsync("Invalid file type. Please upload a PDF, JPG, PNG, or DOC file.", true);
					selectedFile = null;
					return;
				}

				// Update current detail with file information
				currentDetail.Certification_Filename = selectedFile.Name;
				currentDetail.Has_Certifications = true;

				await NotificationService.ShowSuccessAsync($"File '{selectedFile.Name}' selected successfully");
			}
		}
		catch (Exception ex)
		{
			await NotificationService.ShowErrorAsync($"Error processing file: {ex.Message}", true);
		}
	}

	private async Task RemoveSelectedFile()
	{
		// Store filename for notification
		string fileName = currentDetail.Certification_Filename;

		// Show processing notification
		await NotificationService.ShowLineToastAsync("warning");

		selectedFile = null;
		currentDetail.Certification_Filename = null;
		currentDetail.Has_Certifications = false;

		await NotificationService.ShowInfoAsync($"File '{fileName}' removed");
	}

	private async Task HandleValidSubmit()
	{
		try
		{
			// Show processing notification
			await NotificationService.ShowLineToastAsync(isEdit ? "warning" : "success");

			if (isEdit)
			{
				// Call service to update record
				await ServiceDetailService.UpdateServiceDetailAsync(currentDetail);
				await NotificationService.ShowSuccessAsync($"Service detail '{currentDetail.Service_Name}' updated successfully!", true);
			}
			else
			{
				// Call service to create new record
				await ServiceDetailService.CreateServiceDetailAsync(currentDetail);
				await NotificationService.ShowSuccessAsync($"Service detail '{currentDetail.Service_Name}' created successfully!", true);
			}

			CloseModal();
			await grid.Reload();
		}
		catch (Exception ex)
		{
			await NotificationService.ShowErrorAsync($"Error: {ex.Message}", true);
		}
	}

	private async Task ConfirmDelete(ServiceBasedDetail detail)
	{
		// Use the shared delete confirmation service
		await NotificationService.ConfirmAndExecuteDeleteAsync(
			// Delete action to perform if confirmed
			async () => await DeleteServiceDetail(detail.Id),
			// Custom title
			$"Delete {detail.Service_Name}?",
			// Custom message
			"This service detail will be permanently removed. This action cannot be undone."
		);
	}

	private async Task DeleteServiceDetail(Guid id)
	{
		try
		{
			// Get the service detail before deleting (for notification message)
			var detail = await ServiceDetailService.GetServiceDetailByIdAsync(id);
			string serviceName = detail?.Service_Name ?? "Service detail";

			// Call service to delete record
			await ServiceDetailService.DeleteServiceDetailAsync(id);

			// Reload the grid
			await grid.Reload();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Delete error: {ex.Message}");
			throw; // Rethrow to be handled by the confirmation service
		}
	}
}