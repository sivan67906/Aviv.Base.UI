@page "/FormTool/DynamicFormBuilder"
@using System.Text.Json
@using System.Collections.ObjectModel
@using Aviv.Base.UI.Models
@using Aviv.Base.UI.Models.FormTool
@using Aviv.Base.UI.Services
@using Syncfusion.Blazor.DropDowns
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject PageBreadcrumbService BreadcrumbService
@inject NotificationCustomService NotificationService
@inject CustomFormService FormService


<div class="container-fluid">
	<!-- Add the notification component -->
	<NotificationComponent />

	<!-- Main Form -->
	<EditForm Model="@formModel">
		<div class="row">
			<!-- Left Column -->
			<div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6">
				<!-- Combined Form Configuration Card -->
				<div class="card custom-card mb-4">
					<div class="card-header">
						<div class="card-title">Form Configuration</div>
					</div>
					<div class="card-body">
						<!-- Form Header Section -->
						<div class="section-divider">
							<h5 class="section-title"><i class="ri-file-text-line me-2"></i>Page Header</h5>
							<div class="row mb-3">
								<div class="col-12">
									<label class="form-label" for="pageHeader">Page Header <span class="text-danger">*</span></label>
									<InputText id="pageHeader" class="form-control custom-input" @bind-Value="PageHeader"
											   placeholder="Enter page header" />
								</div>
							</div>
						</div>

						<!-- Layout Selection Section -->
						<div class="section-divider">
							<h5 class="section-title"><i class="ri-layout-grid-line me-2"></i>Layout Selection</h5>
							<div class="row">
								<div class="col-12">
									<div class="d-flex mt-2">
										<div class="form-check me-4">
											<input class="form-check-input" type="radio" name="formLayout" id="verticalLayout" value="vertical" checked="@(SelectedLayout == "vertical")" @onchange='() => ChangeLayout("vertical")' />
											<label class="form-check-label" for="verticalLayout">
												Vertical Layout (Standard)
											</label>
										</div>
										<div class="form-check">
											<input class="form-check-input" type="radio" name="formLayout" id="horizontalLayout" value="horizontal" checked="@(SelectedLayout == "horizontal")" @onchange='() => ChangeLayout("horizontal")' />
											<label class="form-check-label" for="horizontalLayout">
												Horizontal Layout (Centered)
											</label>
										</div>
									</div>
								</div>
							</div>
						</div>

						<!-- Breadcrumb Management Section -->
						<div class="section-divider">
							<h5 class="section-title"><i class="ri-navigation-line me-2"></i>Breadcrumb Management</h5>
							<!-- Current Breadcrumbs Preview -->
							<div class="mb-3">
								<label class="form-label">Current Navigation Path</label>
								<div class="border rounded p-2 bg-light">
									<nav aria-label="breadcrumb">
										<ol class="breadcrumb mb-0">
											@foreach (var item in formBreadcrumbItems)
											{
												<li class="breadcrumb-item d-flex align-items-center @(item.IsActive ? "active" : "")">
													@if (item.IsActive)
													{
														<span>@item.Text</span>
													}
													else
													{
														<a href="@item.Url">@item.Text</a>
													}
													@if (!item.IsActive)
													{
														<i class="ri-edit-line text-primary ms-1 cursor-pointer" title="Edit" @onclick="() => EditBreadcrumb(item)"></i>
														<i class="ri-delete-bin-line text-danger ms-1 cursor-pointer" title="Remove" @onclick="() => RemoveBreadcrumb(item)"></i>
													}
												</li>
											}
										</ol>
									</nav>
								</div>
							</div>

							<!-- Add/Edit Breadcrumb -->
							<div class="row mb-3">
								<div class="col-12 col-sm-12 col-md-5 col-lg-5 col-xl-5">
									<label class="form-label" for="breadcrumbText">Breadcrumb Text <span class="text-danger">*</span></label>
									<InputText id="breadcrumbText" class="form-control custom-input"
											   @bind-Value="newBreadcrumbText" placeholder="Enter breadcrumb text" />
								</div>
								<div class="col-12 col-sm-12 col-md-5 col-lg-5 col-xl-5">
									<label class="form-label" for="breadcrumbUrl">Breadcrumb URL</label>
									<InputText id="breadcrumbUrl" class="form-control custom-input"
											   @bind-Value="newBreadcrumbUrl" placeholder="Enter URL (optional)" />
								</div>
								<div class="col-12 col-sm-12 col-md-2 col-lg-2 col-xl-2 d-flex align-items-end mt-2 mt-md-0">
									@if (isEditingBreadcrumb)
									{
										<button class="btn btn-primary w-100" @onclick="UpdateBreadcrumbItem">
											Update
										</button>
									}
									else
									{
										<button class="btn btn-primary w-100" @onclick="AddBreadcrumbItem">
											Add
										</button>
									}
								</div>
							</div>
							@if (isEditingBreadcrumb)
							{
								<div class="mb-3">
									<button class="btn btn-outline-secondary" @onclick="CancelBreadcrumbEdit">
										<i class="ri-close-line me-1"></i> Cancel Editing
									</button>
								</div>
							}
						</div>
					</div>
				</div>

				<!-- Card Management -->
				<div class="card custom-card mb-4">
					<div class="card-header">
						<div class="card-title">Card Management</div>
					</div>
					<div class="card-body">
						<div class="d-flex align-items-center mb-3">
							<div class="section-icon"><i class="ri-layout-masonry-line text-primary fs-4 me-2"></i></div>
							<h5 class="section-title mb-0">Add New Card</h5>
						</div>

						<div class="row mb-3">
							<div class="col-12 col-sm-12 col-md-8 col-lg-8 col-xl-8">
								<label class="form-label" for="cardTitle">Card Title <span class="text-danger">*</span></label>
								<InputText id="cardTitle" class="form-control custom-input" @bind-Value="NewCardTitle" placeholder="Enter card title" />
							</div>
							<div class="col-12 col-sm-12 col-md-4 col-lg-4 col-xl-4 mt-3 mt-md-0">
								<label class="form-label" for="cardSize">Card Size</label>
								<SfDropDownList TValue="int" TItem="int" id="cardSize" CssClass="custom-input"
												DataSource="CardSizes" Placeholder="--" @bind-Value="NewCardSize" />
							</div>
						</div>

						<div class="row mb-3">
							<div class="col-12">
								<button class="btn btn-primary" @onclick="AddCard">
									<i class="ri-add-line me-1"></i> Add Card
								</button>
							</div>
						</div>

						<!-- Existing Cards List -->
						@if (Cards.Count > 0)
						{
							<div class="mt-3">
								<label class="form-label">Added Cards</label>
								<div class="list-group card-list">
									@foreach (var card in Cards)
									{
										<div class="list-group-item d-flex justify-content-between align-items-center">
											<span><i class="ri-window-line me-2 text-primary"></i>@card.CardTitle (Size: @card.CardSize)</span>
											<div>
												<i class="ri-edit-line text-primary cursor-pointer me-2" @onclick="() => EditCardProperties(card)" title="Edit Card"></i>
												<i class="ri-delete-bin-line text-danger cursor-pointer" @onclick="() => RemoveCard(card)" title="Remove Card"></i>
											</div>
										</div>
									}
								</div>
							</div>
						}
					</div>
				</div>

				<!-- Field Configuration Card -->
				<div class="card custom-card mb-4">
					<div class="card-header">
						<div class="card-title">Field Configuration</div>
					</div>
					<div class="card-body">
						<div class="d-flex align-items-center mb-3">
							<div class="section-icon"><i class="ri-list-settings-line text-primary fs-4 me-2"></i></div>
							<h5 class="section-title mb-0">Add Fields to Card</h5>
						</div>

						<div class="row mb-3">
							<div class="col-12">
								<label class="form-label" for="selectCard">Select Card <span class="text-danger">*</span></label>
								<SfDropDownList TValue="string" TItem="string" id="selectCard" CssClass="custom-input"
												DataSource="Cards.Select(x => x.CardTitle).ToList()" Placeholder="--" @bind-Value="SelectedCardTitle" />
							</div>
						</div>

						<div class="row mb-3">
							<div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6">
								<label class="form-label" for="labelName">Label Name <span class="text-danger">*</span></label>
								<InputText id="labelName" class="form-control custom-input" @bind-Value="LabelName" placeholder="Enter label name" />
							</div>
							<div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6 mt-3 mt-md-0">
								<label class="form-label" for="inputType">Input Type <span class="text-danger">*</span></label>
								<SfDropDownList TValue="string" TItem="string" id="inputType" CssClass="custom-input"
												DataSource="InputTypes" Placeholder="--" @bind-Value="InputType" />
							</div>
						</div>

						<div class="row mb-3">
							<div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6">
								<label class="form-label" for="columnSize">Column Size</label>
								<InputNumber id="columnSize" class="form-control custom-input" @bind-Value="ColumnSize" min="1" max="12" />
							</div>
							<div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6 d-flex align-items-end mt-3 mt-md-0">
								<div class="form-check mb-2">
									<input class="form-check-input" type="checkbox" id="isRequiredCheck" @bind="IsFieldRequired" />
									<label class="form-check-label" for="isRequiredCheck">
										Required Field
									</label>
								</div>
							</div>
						</div>

						@if (InputType == "ddl" || InputType == "multiddl" || InputType == "radio" || InputType == "checkbox")
						{
							<div class="row mb-3">
								<div class="col-12">
									<label class="form-label" for="fieldOptions">Options (comma-separated) <span class="text-danger">*</span></label>
									<InputText id="fieldOptions" class="form-control custom-input" @bind-Value="FieldOptions"
											   placeholder="e.g. Option 1, Option 2, Option 3" />
								</div>
							</div>
						}

						<div class="row mb-3">
							<div class="col-12">
								<button class="btn btn-primary" @onclick="AddField">
									<i class="ri-add-line me-1"></i> Add Field
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Button Management Card -->
				<div class="card custom-card mb-4">
					<div class="card-header">
						<div class="card-title">Button Management</div>
					</div>
					<div class="card-body">
						<div class="d-flex align-items-center mb-3">
							<div class="section-icon"><i class="ri-button-line text-primary fs-4 me-2"></i></div>
							<h5 class="section-title mb-0">Configure Form Buttons</h5>
						</div>

						<!-- Current Buttons Preview -->
						<div class="mb-3">
							<label class="form-label">Current Buttons</label>
							<div class="border rounded p-2 bg-light button-preview">
								<div class="d-flex flex-wrap gap-2">
									@foreach (var button in FormButtons)
									{
										<div class="btn @button.ButtonClass d-flex align-items-center">
											@button.ButtonName
											<i class="ri-edit-line text-primary ms-2 cursor-pointer" title="Edit" @onclick="() => EditButton(button)"></i>
											<i class="ri-delete-bin-line text-danger ms-1 cursor-pointer" title="Remove" @onclick="() => RemoveButton(button)"></i>
										</div>
									}
								</div>
							</div>
						</div>

						<!-- Add/Edit Button -->
						<div class="row mb-3">
							<div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6">
								<label class="form-label" for="buttonName">Button Name <span class="text-danger">*</span></label>
								<InputText id="buttonName" class="form-control custom-input"
										   @bind-Value="newButtonName" placeholder="Enter button name" />
							</div>
							<div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6">
								<label class="form-label" for="buttonClass">Button Style</label>
								<SfDropDownList TValue="string" TItem="string" id="buttonClass" CssClass="custom-input"
												DataSource="ButtonClasses" Placeholder="--" @bind-Value="newButtonClass" />
							</div>
						</div>
						<div class="row mb-3">
							<div class="col-12">
								<label class="form-label" for="buttonPosition">Button Position</label>
								<SfDropDownList TValue="string" TItem="string" id="buttonPosition" CssClass="custom-input"
												DataSource="ButtonPositions" Placeholder="--" @bind-Value="newButtonPosition" />
							</div>
						</div>
						<div class="row mb-3">
							<div class="col-12 d-flex">
								@if (isEditingButton)
								{
									<button class="btn btn-primary" @onclick="UpdateButtonItem">
										Update
									</button>
									<button class="btn btn-outline-secondary ms-2" @onclick="CancelButtonEdit">
										<i class="ri-close-line me-1"></i> Cancel
									</button>
								}
								else
								{
									<button class="btn btn-primary" @onclick="AddButtonItem">
										<i class="ri-add-line me-1"></i> Add Button
									</button>
								}
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Right Column -->
			<div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6">
				<!-- Form Preview Section with fixed button positioning -->
				<div class="card custom-card mb-4 sticky-preview">
					<div class="card-header bg-primary-subtle">
						<div class="card-title text-primary">Form Preview</div>
					</div>
					<div class="card-body">
						<!-- Header Preview -->
						<div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4 pb-2 border-bottom">
							<h4 class="mb-2 mb-md-0">@(string.IsNullOrEmpty(PageHeader) ? "Form Title" : PageHeader)</h4>
							<nav aria-label="breadcrumb">
								<ol class="breadcrumb mb-0">
									@foreach (var item in formBreadcrumbItems)
									{
										<li class="breadcrumb-item @(item.IsActive ? "active" : "")">
											@if (item.IsActive)
											{
												@item.Text
											}
											else
											{
												<a href="@item.Url">@item.Text</a>
											}
										</li>
									}
								</ol>
							</nav>
						</div>

						<!-- Cards Preview with fixed button positioning -->
						<div class="row g-3">
							@foreach (var card in Cards)
							{
								<div class="col-12 col-sm-12 col-md-@card.CardSize col-lg-@card.CardSize col-xl-@card.CardSize mb-3">
									<div class="card">
										<div class="card-header d-flex justify-content-between align-items-center">
											<strong>@card.CardTitle</strong>
											<div>
												<!-- New Card Edit Button -->
												<i class="ri-edit-line text-primary me-2 cursor-pointer" title="Edit Card Properties"
												   @onclick="() => EditCardProperties(card)"></i>
												<i class="ri-settings-line text-secondary cursor-pointer" title="@(card.IsEditMode ? "Done" : "Edit Fields")"
												   @onclick="() => ToggleCardEdit(card)"></i>
											</div>
										</div>
										<div class="card-body form-preview-card">
											<div class="row">
												@foreach (var field in card.Fields)
												{
													<div class="col-12 col-sm-12 col-md-@field.ColumnSize col-lg-@field.ColumnSize col-xl-@field.ColumnSize mb-3 position-relative">
														<div class="@(card.IsEditMode ? "border border-light bg-light rounded p-3" : "")">
															@if (card.IsEditMode)
															{
																<div class="position-absolute top-0 end-0 edit-controls">
																	<i class="ri-edit-line text-primary cursor-pointer" title="Edit Field"
																	   @onclick="() => EditField(card, field)"></i>
																	<i class="ri-delete-bin-line text-danger cursor-pointer ms-2" title="Delete Field"
																	   @onclick="() => DeleteField(card, field)"></i>
																</div>
															}

															<label class="form-label">
																@field.LabelName
																@if (field.IsRequired)
																{
																	<span class="text-danger">*</span>
																}
															</label>
															@switch (field.InputType.ToLower())
															{
																case "textbox":
																	<InputText class="form-control custom-input" @bind-Value="field.Value"
																			   placeholder="@($"Enter {field.LabelName.ToLower()}")" />
																	break;

																case "textarea":
																	<InputTextArea class="form-control custom-input" @bind-Value="field.Value"
																				   placeholder="@($"Enter {field.LabelName.ToLower()}")" rows="3" />
																	break;

																case "ddl":
																	var ddlOptions = field.Options?.Split(',') ?? Array.Empty<string>();
																	<SfDropDownList TValue="string" TItem="string" CssClass="custom-input"
																					Placeholder="--" DataSource="ddlOptions" @bind-Value="field.Value">
																	</SfDropDownList>
																	break;

																case "multiddl":
																	var multiOptions = field.Options?.Split(',') ?? Array.Empty<string>();
																	<SfMultiSelect TValue="List<string>" TItem="string" CssClass="custom-input"
																				   Placeholder="--" DataSource="multiOptions" @bind-Value="field.MultiValue" />
																	break;

																case "tags":
																	<SfMultiSelect TValue="List<string>" TItem="string" CssClass="custom-input"
																				   @bind-Value="field.MultiValue"
																				   Placeholder="--"
																				   Mode="VisualMode.Box"
																				   AllowCustomValue="true"
																				   AllowFiltering="true"
																				   ShowClearButton="true"
																				   EnableGroupCheckBox="true"
																				   MaximumSelectionLength="10"
																				   ShowSelectAll="true">
																	</SfMultiSelect>
																	break;

																case "radio":
																	var radioOptions = field.Options?.Split(',') ?? Array.Empty<string>();
																	<InputRadioGroup @bind-Value="field.Value">
																		@foreach (var opt in radioOptions)
																		{
																			<div class="form-check">
																				<InputRadio class="form-check-input" Value="@opt" />
																				<label class="form-check-label">@opt</label>
																			</div>
																		}
																	</InputRadioGroup>
																	break;

																case "checkbox":
																	var checkOptions = field.Options?.Split(',') ?? Array.Empty<string>();
																	@foreach (var opt in checkOptions)
																	{
																		<div class="form-check">
																			<input type="checkbox" class="form-check-input"
																				   value="@opt"
																				   @onchange="e => OnCheckboxChanged(e, field, opt)"
																				   checked="@(field.MultiValue?.Contains(opt) ?? false)" />
																			<label class="form-check-label">@opt</label>
																		</div>
																	}
																	break;
															}
														</div>
													</div>
												}
											</div>
										</div>
										<!-- Card Buttons Section -->
										@if (FormButtons.Any())
										{
											<div class="card-footer p-3 mt-3">
												<div class="d-flex @(GetButtonContainerClass())">
													<!-- Left buttons -->
													@if (FormButtons.Any(b => b.ButtonPosition == "left"))
													{
														<div class="d-flex gap-2">
															@foreach (var button in FormButtons.Where(b => b.ButtonPosition == "left"))
															{
																<div class="btn @button.ButtonClass position-relative">
																	@button.ButtonName
																	<div class="position-absolute top-0 end-0 p-1">
																		<i class="ri-edit-line text-primary cursor-pointer" title="Edit Button"
																		   @onclick="() => EditButton(button)"></i>
																		<i class="ri-delete-bin-line text-danger cursor-pointer ms-1" title="Delete Button"
																		   @onclick="() => RemoveButton(button)"></i>
																	</div>
																</div>
															}
														</div>
													}

													<!-- Center buttons -->
													@if (FormButtons.Any(b => b.ButtonPosition == "center"))
													{
														<div class="d-flex gap-2 mx-auto">
															@foreach (var button in FormButtons.Where(b => b.ButtonPosition == "center"))
															{
																<div class="btn @button.ButtonClass position-relative">
																	@button.ButtonName
																	<div class="position-absolute top-0 end-0 p-1">
																		<i class="ri-edit-line text-primary cursor-pointer" title="Edit Button"
																		   @onclick="() => EditButton(button)"></i>
																		<i class="ri-delete-bin-line text-danger cursor-pointer ms-1" title="Delete Button"
																		   @onclick="() => RemoveButton(button)"></i>
																	</div>
																</div>
															}
														</div>
													}

													<!-- Right buttons -->
													@if (FormButtons.Any(b => b.ButtonPosition == "right"))
													{
														<div class="d-flex gap-2">
															@foreach (var button in FormButtons.Where(b => b.ButtonPosition == "right"))
															{
																<div class="btn @button.ButtonClass position-relative">
																	@button.ButtonName
																	<div class="position-absolute top-0 end-0 p-1">
																		<i class="ri-edit-line text-primary cursor-pointer" title="Edit Button"
																		   @onclick="() => EditButton(button)"></i>
																		<i class="ri-delete-bin-line text-danger cursor-pointer ms-1" title="Delete Button"
																		   @onclick="() => RemoveButton(button)"></i>
																	</div>
																</div>
															}
														</div>
													}
												</div>
											</div>
										}
									</div>
								</div>
							}
						</div>

						<!-- Empty State if No Cards -->
						@if (Cards.Count == 0)
						{
							<div class="text-center py-5 text-muted empty-state">
								<i class="ri-layout-4-line" style="font-size: 48px;"></i>
								<p class="mt-2">Add cards to start building your form</p>
							</div>
						}
					</div>
				</div>

				<!-- Publish Section -->
				<div class="card custom-card mb-4">
					<div class="card-header bg-success-subtle">
						<div class="card-title text-success">Publish Form</div>
					</div>
					<div class="card-body">
						<p class="mb-3">Make your form available by publishing it. Published forms can be accessed via a public URL.</p>

						<button class="btn btn-success w-100 mb-3" @onclick="PublishForm">
							<i class="ri-global-line me-2"></i> Publish Form
							<small class="ms-1">(@(SelectedLayout == "horizontal" ? "Centered Horizontal Layout" : "Standard Vertical Layout"))</small>
						</button>

						@if (!string.IsNullOrEmpty(PublishedUrl))
						{
							<div class="card bg-light mt-3 published-url-card">
								<div class="card-body p-3">
									<h6 class="card-title"><i class="ri-check-line text-success me-1"></i> Form Published!</h6>
									<p class="mb-2">Access your form using the link below:</p>
									<div class="input-group mb-2">
										<input type="text" class="form-control" readonly value="@PublishedUrl" id="publishedUrlInput" />
										<button class="btn btn-outline-secondary" type="button" @onclick="CopyUrlToClipboard">
											<i class="ri-file-copy-line"></i>
										</button>
									</div>
									<div class="text-end">
										<a href="@PublishedUrl" target="_blank" class="btn btn-sm btn-outline-primary">
											<i class="ri-external-link-line me-1"></i> Open Form
										</a>
									</div>
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	</EditForm>
</div>

<!-- Edit Field Modal -->
@if (IsFieldEditModalVisible)
{
	<div class="modal" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);" role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title"><i class="ri-edit-line me-2"></i>Edit Field</h5>
					<button type="button" class="btn-close" @onclick="CloseFieldEditModal"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<label class="form-label">Label Name <span class="text-danger">*</span></label>
						<input type="text" class="form-control custom-input" @bind="EditingField.LabelName" />
					</div>

					<div class="mb-3">
						<label class="form-label">Column Size</label>
						<input type="number" class="form-control custom-input" @bind="EditingField.ColumnSize" min="1" max="12" />
					</div>

					<div class="mb-3 form-check">
						<input type="checkbox" class="form-check-input" id="isRequired" @bind="EditingField.IsRequired" />
						<label class="form-check-label" for="isRequired">
							Required Field
						</label>
					</div>

					@if (EditingField != null && (EditingField.InputType == "ddl" || EditingField.InputType == "multiddl" ||
										EditingField.InputType == "radio" || EditingField.InputType == "checkbox"))
					{
						<div class="mb-3">
							<label class="form-label">Options (comma-separated) <span class="text-danger">*</span></label>
							<input type="text" class="form-control custom-input" @bind="EditingField.Options" />
						</div>
					}
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-outline-secondary" @onclick="CloseFieldEditModal">Cancel</button>
					<button type="button" class="btn btn-primary" @onclick="SaveFieldEdit">Save Changes</button>
				</div>
			</div>
		</div>
	</div>
}

<!-- Card Edit Modal -->
@if (IsCardEditModalVisible)
{
	<div class="modal" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);" role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title"><i class="ri-window-line me-2"></i>Edit Card Properties</h5>
					<button type="button" class="btn-close" @onclick="CloseCardEditModal"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<label class="form-label">Card Title <span class="text-danger">*</span></label>
						<input type="text" class="form-control custom-input" @bind="EditingCard.CardTitle" />
					</div>

					<div class="mb-3">
						<label class="form-label">Card Size</label>
						<SfDropDownList TValue="int" TItem="int" CssClass="custom-input"
										DataSource="CardSizes" Placeholder="--" @bind-Value="EditingCard.CardSize" />
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-outline-secondary" @onclick="CloseCardEditModal">Cancel</button>
					<button type="button" class="btn btn-primary" @onclick="SaveCardEdit">Save Changes</button>
				</div>
			</div>
		</div>
	</div>
}

<!-- Button Edit Modal -->
@if (IsButtonEditModalVisible)
{
	<div class="modal" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);" role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title"><i class="ri-button-line me-2"></i>Edit Button Properties</h5>
					<button type="button" class="btn-close" @onclick="CloseButtonEditModal"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<label class="form-label">Button Name <span class="text-danger">*</span></label>
						<input type="text" class="form-control custom-input" @bind="EditingButton.ButtonName" />
					</div>

					<div class="mb-3">
						<label class="form-label">Button Style</label>
						<SfDropDownList TValue="string" TItem="string" CssClass="custom-input"
										DataSource="ButtonClasses" Placeholder="--" @bind-Value="EditingButton.ButtonClass" />
					</div>

					<div class="mb-3">
						<label class="form-label">Button Position</label>
						<SfDropDownList TValue="string" TItem="string" CssClass="custom-input"
										DataSource="ButtonPositions" Placeholder="--" @bind-Value="EditingButton.ButtonPosition" />
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-outline-secondary" @onclick="CloseButtonEditModal">Cancel</button>
					<button type="button" class="btn btn-primary" @onclick="SaveButtonEdit">Save Changes</button>
				</div>
			</div>
		</div>
	</div>
}

<style>
	/* Custom card styling to match the lead form example */
	.custom-card {
		box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
		border: 0;
		border-radius: 0.5rem;
		margin-bottom: 1.5rem;
		transition: transform 0.2s, box-shadow 0.2s;
	}

		.custom-card:hover {
			box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
		}

		.custom-card .card-header {
			background-color: #f8f9fa;
			padding: 0.75rem 1.25rem;
			border-bottom: 1px solid #e9ecef;
			border-top-left-radius: 0.5rem;
			border-top-right-radius: 0.5rem;
		}

		.custom-card .card-title {
			margin-bottom: 0;
			font-weight: 500;
			color: #495057;
			position: relative;
			padding-left: 12px;
		}

			.custom-card .card-title::before {
				content: "";
				position: absolute;
				left: 0;
				top: 0;
				bottom: 0;
				width: 4px;
				background-color: #8F69E1;
				border-radius: 2px;
			}

	/* Section styling */
	.section-divider {
		margin-bottom: 1.5rem;
		padding-bottom: 1.5rem;
		border-bottom: 1px solid #e9ecef;
	}

		.section-divider:last-child {
			border-bottom: none;
			margin-bottom: 0;
			padding-bottom: 0;
		}

	.section-title {
		font-size: 1rem;
		font-weight: 500;
		color: #495057;
		margin-bottom: 1rem;
	}

	.section-icon {
		display: flex;
		align-items: center;
		justify-content: center;
	}

	/* Form controls */
	.custom-input {
		padding: 0.375rem 0.75rem;
		font-size: 0.875rem;
		border: 1px solid #ced4da;
		border-radius: 0.25rem;
		transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
	}

		.custom-input:focus {
			border-color: #8F69E1;
			box-shadow: 0 0 0 0.2rem rgba(143, 105, 225, 0.25);
		}

	.form-label {
		margin-bottom: 0.25rem;
		font-weight: 500;
		color: #495057;
	}

	/* Form preview section */
	.sticky-preview {
		position: sticky;
		top: 1rem;
	}

	.empty-state {
		padding: 2rem;
		border: 2px dashed #dee2e6;
		border-radius: 0.5rem;
	}

	.card-list .list-group-item {
		transition: background-color 0.2s;
	}

		.card-list .list-group-item:hover {
			background-color: #f8f9fa;
		}

	.button-preview .btn {
		position: relative;
		padding-right: 2.5rem;
	}

		.button-preview .btn i {
			opacity: 0;
			transition: opacity 0.2s;
		}

		.button-preview .btn:hover i {
			opacity: 1;
		}

	.published-url-card {
		animation: fadeIn 0.5s;
	}

	@@keyframes fadeIn {
		from

	{
		opacity: 0;
	}

	to {
		opacity: 1;
	}

	}

	/* Cursor pointer class */
	.cursor-pointer {
		cursor: pointer !important;
	}

	/* Responsive adjustments */
	@@media (max-width: 767.98px) {
		.breadcrumb

	{
		margin-top: 0.5rem;
	}

	.sticky-preview {
		position: static;
	}

	}

	/* Edit controls styling */
	.edit-controls {
		position: absolute;
		top: 5px;
		right: 5px;
		display: flex;
		padding: 5px;
		z-index: 10;
	}

	/* Modal enhancement */
	.modal-content {
		border-radius: 0.5rem;
		border: none;
	}

	.modal-header {
		background-color: #f8f9fa;
		border-top-left-radius: 0.5rem;
		border-top-right-radius: 0.5rem;
	}

	/* Button styling */
	.btn .position-absolute {
		opacity: 0;
		transition: opacity 0.2s;
		background: rgba(255,255,255,0.9);
		border-radius: 4px;
	}

	.btn:hover .position-absolute {
		opacity: 1;
	}

	/* Success and Primary accent colors */
	.bg-primary-subtle {
		background-color: rgba(143, 105, 225, 0.1);
	}

	.bg-success-subtle {
		background-color: rgba(40, 167, 69, 0.1);
	}

	.text-primary {
		color: #8F69E1 !important;
	}

	.text-success {
		color: #28a745 !important;
	}
</style>

@code {
	private FormViewModel formModel = new FormViewModel();
	private string PageHeader { get; set; } = "";
	private string NewCardTitle { get; set; } = "";
	private int NewCardSize { get; set; } = 12;
	private string SelectedCardTitle { get; set; } = "";
	private string LabelName { get; set; } = "";
	private string InputType { get; set; } = "";
	private int ColumnSize { get; set; } = 6;
	private string FieldOptions { get; set; } = "";
	private bool IsFieldRequired { get; set; } = false;
	private string PublishedUrl { get; set; } = "";
	private string SelectedLayout { get; set; } = "vertical";

	// Button management properties
	private List<ButtonModel> FormButtons { get; set; } = [];
	private string newButtonName = "";
	private string newButtonClass = "btn-primary";
	private string newButtonPosition = "right";
	private bool isEditingButton = false;
	private ButtonModel EditingButton { get; set; } = new ButtonModel();
	private int editingButtonIndex = -1;
	private bool IsButtonEditModalVisible = false;

	// Button class and position options
	private List<string> ButtonClasses = new List<string>
	{
		"btn-primary",
		"btn-secondary",
		"btn-success",
		"btn-danger",
		"btn-warning",
		"btn-info",
		"btn-light",
		"btn-dark",
		"btn-outline-primary",
		"btn-outline-secondary",
		"btn-outline-success",
		"btn-outline-danger",
		"btn-outline-warning",
		"btn-outline-info",
		"btn-outline-light",
		"btn-outline-dark"
	};

	private List<string> ButtonPositions = new List<string>
	{
		"left",
		"center",
		"right"
	};

	// Breadcrumb management for the current page (fixed)
	private List<BreadcrumbEntry> pageBreadcrumbItems = new List<BreadcrumbEntry>();

	// Breadcrumb management for the form being created
	private List<BreadcrumbEntry> formBreadcrumbItems = new List<BreadcrumbEntry>();
	private string newBreadcrumbText = "";
	private string newBreadcrumbUrl = "";
	private bool isEditingBreadcrumb = false;
	private int editingBreadcrumbIndex = -1;

	private ObservableCollection<CardModel> Cards = new ObservableCollection<CardModel>();
	private readonly List<int> CardSizes = Enumerable.Range(1, 12).ToList();
	private readonly List<string> InputTypes = new List<string> { "textbox", "textarea", "ddl", "multiddl", "radio", "checkbox", "tags" };

	// Properties for card editing
	private bool IsCardEditModalVisible = false;
	private CardModel EditingCard = new CardModel();
	private int EditingCardIndex = -1;

	protected override async Task OnInitializedAsync()
	{
		// Set page breadcrumbs correctly
		BreadcrumbService.SetBreadcrumbPath(
			"Dynamic Form Builder",
			("Home", "/"),
			("Form Builder", "/FormTool")
		);

		// Set initial breadcrumbs for the form being created
		formBreadcrumbItems = new List<BreadcrumbEntry>
		{
			new BreadcrumbEntry { Text = "Home", Url = "/", IsActive = false },
			new BreadcrumbEntry { Text = "Forms", Url = "/forms", IsActive = false },
			new BreadcrumbEntry { Text = "Create", Url = null, IsActive = true }
		};

		await base.OnInitializedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Initialize notification service if available
			if (NotificationService != null)
			{
				await NotificationService.InitializeAsync();
				await NotificationService.ShowInfoAsync("Create a dynamic form by adding cards and fields.");
			}
		}
	}

	private void UpdateServiceBreadcrumbs()
	{
		// Only update the breadcrumbs for the current page
		var pageTitle = "Dynamic Form Builder";

		var breadcrumbArray = pageBreadcrumbItems
			.Where(b => !b.IsActive)
			.Select(b => (b.Text, b.Url))
			.ToList();

		// Add the active breadcrumb at the end
		var activeBreadcrumb = pageBreadcrumbItems.FirstOrDefault(b => b.IsActive);
		if (activeBreadcrumb != null)
		{
			breadcrumbArray.Add((activeBreadcrumb.Text, activeBreadcrumb.Url));
		}

		BreadcrumbService.SetBreadcrumbPath(pageTitle, breadcrumbArray.ToArray());
	}

	// Helper method to get the appropriate button container class based on button positions
	private string GetButtonContainerClass()
	{
		bool hasLeft = FormButtons.Any(b => b.ButtonPosition == "left");
		bool hasCenter = FormButtons.Any(b => b.ButtonPosition == "center");
		bool hasRight = FormButtons.Any(b => b.ButtonPosition == "right");

		if (hasLeft && hasRight)
		{
			return "justify-content-between";
		}
		else if (hasLeft && hasCenter && !hasRight)
		{
			return "justify-content-start";
		}
		else if (!hasLeft && !hasCenter && hasRight)
		{
			return "justify-content-end";
		}
		else if (!hasLeft && hasCenter && !hasRight)
		{
			return "justify-content-center";
		}
		else
		{
			return "justify-content-between";
		}
	}

	// Layout selection method
	private void ChangeLayout(string layout)
	{
		SelectedLayout = layout;
		StateHasChanged();
	}

	// Breadcrumb management methods
	private void AddBreadcrumbItem()
	{
		if (string.IsNullOrWhiteSpace(newBreadcrumbText))
			return;

		// Get the currently active breadcrumb in the form's breadcrumbs
		var activeBreadcrumb = formBreadcrumbItems.FirstOrDefault(b => b.IsActive);
		if (activeBreadcrumb != null)
		{
			// Make it non-active
			activeBreadcrumb.IsActive = false;
		}

		// Add the new breadcrumb as active for the form being created
		formBreadcrumbItems.Add(new BreadcrumbEntry
			{
				Text = newBreadcrumbText,
				Url = string.IsNullOrEmpty(newBreadcrumbUrl) ? null : newBreadcrumbUrl,
				IsActive = true
			});

		// Reset fields
		newBreadcrumbText = "";
		newBreadcrumbUrl = "";

		StateHasChanged();
	}

	private void RemoveBreadcrumb(BreadcrumbEntry item)
	{
		// Cannot remove the active breadcrumb
		if (item.IsActive)
			return;

		formBreadcrumbItems.Remove(item);

		StateHasChanged();
	}

	private void EditBreadcrumb(BreadcrumbEntry item)
	{
		// Cannot edit the active breadcrumb
		if (item.IsActive)
			return;

		// Set editing state
		isEditingBreadcrumb = true;
		editingBreadcrumbIndex = formBreadcrumbItems.IndexOf(item);

		// Populate edit fields
		newBreadcrumbText = item.Text;
		newBreadcrumbUrl = item.Url ?? "";
	}

	private void UpdateBreadcrumbItem()
	{
		if (editingBreadcrumbIndex < 0 || editingBreadcrumbIndex >= formBreadcrumbItems.Count)
			return;

		if (string.IsNullOrWhiteSpace(newBreadcrumbText))
			return;

		// Update the breadcrumb for the form being created
		formBreadcrumbItems[editingBreadcrumbIndex].Text = newBreadcrumbText;
		formBreadcrumbItems[editingBreadcrumbIndex].Url = string.IsNullOrEmpty(newBreadcrumbUrl) ? null : newBreadcrumbUrl;

		// Reset editing state
		CancelBreadcrumbEdit();

		StateHasChanged();
	}

	private void CancelBreadcrumbEdit()
	{
		isEditingBreadcrumb = false;
		editingBreadcrumbIndex = -1;
		newBreadcrumbText = "";
		newBreadcrumbUrl = "";
	}

	// Button management methods
	private void AddButtonItem()
	{
		if (string.IsNullOrWhiteSpace(newButtonName))
		{
			NotificationService?.ShowWarningAsync("Button name is required");
			return;
		}

		FormButtons.Add(new ButtonModel
			{
				ButtonName = newButtonName,
				ButtonClass = newButtonClass,
				ButtonPosition = newButtonPosition
			});

		// Reset fields
		ResetButtonFields();

		NotificationService?.ShowSuccessAsync("Button added successfully");
		StateHasChanged();
	}

	private void RemoveButton(ButtonModel button)
	{
		FormButtons.Remove(button);
		NotificationService?.ShowInfoAsync("Button removed");
		StateHasChanged();
	}

	private void EditButton(ButtonModel button)
	{
		EditingButton = new ButtonModel
			{
				ButtonName = button.ButtonName,
				ButtonClass = button.ButtonClass,
				ButtonPosition = button.ButtonPosition
			};

		editingButtonIndex = FormButtons.IndexOf(button);
		IsButtonEditModalVisible = true;
		StateHasChanged();
	}

	private void SaveButtonEdit()
	{
		if (editingButtonIndex >= 0 && !string.IsNullOrWhiteSpace(EditingButton.ButtonName))
		{
			// Update the button
			FormButtons[editingButtonIndex] = EditingButton;
			CloseButtonEditModal();
			NotificationService?.ShowSuccessAsync("Button updated successfully");
		}
		else
		{
			NotificationService?.ShowWarningAsync("Button name is required");
		}
	}

	private void CloseButtonEditModal()
	{
		IsButtonEditModalVisible = false;
		editingButtonIndex = -1;
		StateHasChanged();
	}

	private void ResetButtonFields()
	{
		newButtonName = "";
		newButtonClass = "btn-primary";
		newButtonPosition = "right";
		isEditingButton = false;
	}

	private void UpdateButtonItem()
	{
		if (string.IsNullOrWhiteSpace(newButtonName))
		{
			NotificationService?.ShowWarningAsync("Button name is required");
			return;
		}

		if (editingButtonIndex >= 0 && editingButtonIndex < FormButtons.Count)
		{
			FormButtons[editingButtonIndex].ButtonName = newButtonName;
			FormButtons[editingButtonIndex].ButtonClass = newButtonClass;
			FormButtons[editingButtonIndex].ButtonPosition = newButtonPosition;

			// Reset editing state
			CancelButtonEdit();
			NotificationService?.ShowSuccessAsync("Button updated successfully");
		}
	}

	private void CancelButtonEdit()
	{
		isEditingButton = false;
		editingButtonIndex = -1;
		ResetButtonFields();
	}

	// Card management methods
	private void AddCard()
	{
		if (!string.IsNullOrWhiteSpace(NewCardTitle))
		{
			Cards.Add(new CardModel
				{
					CardTitle = NewCardTitle,
					CardSize = NewCardSize
				});
			NewCardTitle = string.Empty;
		}
	}

	private void RemoveCard(CardModel card)
	{
		Cards.Remove(card);
	}

	// Method to edit card properties
	private void EditCardProperties(CardModel card)
	{
		EditingCardIndex = Cards.IndexOf(card);
		if (EditingCardIndex >= 0)
		{
			// Create a new instance to edit (to avoid direct reference modification)
			EditingCard = new CardModel
				{
					CardTitle = card.CardTitle,
					CardSize = card.CardSize
				};

			IsCardEditModalVisible = true;
			StateHasChanged();
		}
	}

	// Method to save card edits
	private void SaveCardEdit()
	{
		if (EditingCardIndex >= 0 && !string.IsNullOrWhiteSpace(EditingCard.CardTitle))
		{
			// Update the card properties
			Cards[EditingCardIndex].CardTitle = EditingCard.CardTitle;
			Cards[EditingCardIndex].CardSize = EditingCard.CardSize;

			CloseCardEditModal();
		}
	}

	// Method to close the card edit modal
	private void CloseCardEditModal()
	{
		IsCardEditModalVisible = false;
		EditingCard = new CardModel();
		EditingCardIndex = -1;
		StateHasChanged();
	}

	// Field management methods
	private void AddField()
	{
		var card = Cards.FirstOrDefault(c => c.CardTitle == SelectedCardTitle);
		if (card != null && !string.IsNullOrWhiteSpace(LabelName) && !string.IsNullOrWhiteSpace(InputType))
		{
			card.Fields.Add(new FieldModel
				{
					LabelName = LabelName,
					InputType = InputType,
					ColumnSize = ColumnSize,
					Options = FieldOptions,
					MultiValue = new List<string>(),
					IsRequired = IsFieldRequired
				});

			LabelName = string.Empty;
			InputType = string.Empty;
			ColumnSize = 6;
			FieldOptions = string.Empty;
			IsFieldRequired = false;
		}
	}

	private void OnCheckboxChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e, FieldModel field, string option)
	{
		bool isChecked = e?.Value?.ToString() == "true";
		if (field.MultiValue == null)
		{
			field.MultiValue = new List<string>();
		}

		if (isChecked)
		{
			if (!field.MultiValue.Contains(option))
				field.MultiValue.Add(option);
		}
		else
		{
			field.MultiValue.Remove(option);
		}
	}

	// Field editing functionality
	bool IsFieldEditModalVisible = false;
	CardModel SelectedCard;
	FieldModel EditingField = new FieldModel();
	int EditingFieldIndex = -1;

	void ToggleCardEdit(CardModel card)
	{
		card.IsEditMode = !card.IsEditMode;
		StateHasChanged();
	}

	void EditField(CardModel card, FieldModel field)
	{
		SelectedCard = card;

		// Find the index of the field in the card's Fields collection
		EditingFieldIndex = card.Fields.IndexOf(field);

		if (EditingFieldIndex >= 0)
		{
			// Create a new instance to edit (deep copy)
			EditingField = new FieldModel
				{
					LabelName = field.LabelName,
					InputType = field.InputType,
					ColumnSize = field.ColumnSize,
					Options = field.Options,
					Value = field.Value,
					IsRequired = field.IsRequired,
					MultiValue = field.MultiValue != null
										? new List<string>(field.MultiValue)
										: new List<string>()
				};

			IsFieldEditModalVisible = true;
			StateHasChanged();
		}
	}

	void SaveFieldEdit()
	{
		if (SelectedCard != null && EditingField != null && EditingFieldIndex >= 0)
		{
			// Replace the field at the stored index
			SelectedCard.Fields[EditingFieldIndex] = EditingField;
			CloseFieldEditModal();
		}
	}

	void CloseFieldEditModal()
	{
		IsFieldEditModalVisible = false;
		EditingField = new FieldModel();
		EditingFieldIndex = -1;
		StateHasChanged();
	}

	void DeleteField(CardModel card, FieldModel field)
	{
		if (card != null && field != null)
		{
			card.Fields.Remove(field);
			StateHasChanged();
		}
	}

	// Publish functionality
	private async Task PublishForm()
	{
		if (Cards.Count == 0)
		{
			if (NotificationService != null)
			{
				await NotificationService.ShowWarningAsync("Please add at least one card to publish the form.");
			}
			return;
		}

		// Create a model to represent the form
		var formData = new FormModel
			{
				FormId = Guid.NewGuid().ToString(),
				PageHeader = PageHeader,
				BreadcrumbItems = formBreadcrumbItems.Select(b => new BreadcrumbInfo
				{
					Text = b.Text,
					Url = b.Url,
					IsActive = b.IsActive
				}).ToList(),
				Cards = new List<CardModel>(),
			// Add layout information
				FormLayout = SelectedLayout,
			// Add buttons to published form
				Buttons = FormButtons
			};

		// Make a deep copy of the cards to avoid reference issues
		foreach (var card in Cards)
		{
			var newCard = new CardModel
				{
					CardTitle = card.CardTitle,
					CardSize = card.CardSize,
					Fields = new ObservableCollection<FieldModel>()
				};

			foreach (var field in card.Fields)
			{
				newCard.Fields.Add(new FieldModel
					{
						LabelName = field.LabelName,
						InputType = field.InputType,
						ColumnSize = field.ColumnSize,
						Options = field.Options,
						Value = field.Value,
						IsRequired = field.IsRequired,
						MultiValue = field.MultiValue != null
											? new List<string>(field.MultiValue)
											: new List<string>()
					});
			}

			formData.Cards.Add(newCard);
		}

		// Use the FormService to publish the form
		PublishedUrl = await FormService.PublishFormAsync(formData, NavigationManager.BaseUri);

		// Show success notification
		if (NotificationService != null)
		{
			await NotificationService.ShowSuccessAsync("Form published successfully!");
		}

		StateHasChanged();
	}

	private async Task CopyUrlToClipboard()
	{
		await FormService.CopyToClipboardAsync(PublishedUrl);

		// Show notification
		if (NotificationService != null)
		{
			await NotificationService.ShowInfoAsync("URL copied to clipboard");
		}
	}
}