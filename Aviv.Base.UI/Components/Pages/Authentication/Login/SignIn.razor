@page "/"
@page "/Login"
@using Aviv.Base.UI.Components.Layout
@using Aviv.Base.UI.Models.Authentication
@using Aviv.Base.UI.Services.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@layout CustomLayout
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject NotificationCustomService NotificationService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<style>
	.authentication-basic {
		min-height: 100vh;
		display: flex;
		align-items: center;
	}

	.custom-card {
		min-height: 585px;
		max-width: 490px;
		margin: 0 auto;
	}

	.letter-space {
		letter-spacing: 1px;
	}

	@@media (min-width: 1200px) {
		.custom-card {
			transform: none !important;
			width: 100% !important;
		}
	}

	.validation-message {
		color: #dc3545;
		font-size: 0.8rem;
		margin-top: 0.25rem;
	}

	.error-alert {
		margin-top: 1rem;
		padding: 0.75rem 1.25rem;
		color: #721c24;
		background-color: #f8d7da;
		border-color: #f5c6cb;
		border-radius: 0.25rem;
	}
</style>

<div class="container-fluid" style="background-color: #1c2e4a; height: 100%;">
	<div class="row justify-content-center align-items-center authentication authentication-basic">
		<div class="col-xxl-4 col-xl-5 col-lg-5 col-md-6 col-sm-8 col-12">
			<div class="card custom-card">
				<div class="card-header mt-2 justify-content-center">
					<div class="row">
						<div class="col-12 mt-3">
							<div class="d-flex justify-content-center fw-700 fs-30" style="letter-spacing: 0.15rem">
								<h1 class="desktop-logo fw-25 letter-space"><span class="text-primary me-1">Oto</span><span class="text-warning">Solve</span></h1>
								<h1 class="desktop-dark fw-25 letter-space"><span class="text-primary me-1">Oto</span><span class="text-warning">Solve</span></h1>
							</div>
						</div>
						<div class="col-12 mt-2">
							<p class="h5 fw-semibold mb-2 text-center" style="font-size: 1.15rem !important;">CRM Sign In</p>
							<p class="mb-2 text-muted op-7 fw-normal text-center"></p>
						</div>
					</div>
				</div>
				<div class="card-body p-5 pt-0">
					<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
						<DataAnnotationsValidator />

						@if (!string.IsNullOrEmpty(errorMessage))
						{
							<div class="error-alert">
								<i class="ri-error-warning-line me-2"></i> @errorMessage
							</div>
						}

						<div class="row mt-3 mb-5 gy-3">
							<div class="col-xl-12">
								<label for="signin-username" class="form-label text-default">User Name</label>
								<InputText id="signin-username" class="form-control form-control-lg" @bind-Value="loginModel.Username" placeholder="Enter username" />
								<ValidationMessage For="@(() => loginModel.Username)" class="validation-message" />
							</div>
							<div class="col-xl-12 mb-2">
								<label for="signin-password" class="form-label text-default d-block">
									Password
									<a href="reset-password-basic" class="float-end text-danger">Forget password ?</a>
								</label>
								<PasswordToggle @bind-Password="loginModel.Password" />
								<ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
								<div class="mt-2">
									<div class="form-check">
										<InputCheckbox class="form-check-input" id="rememberMe" @bind-Value="loginModel.RememberMe" />
										<label class="form-check-label text-muted fw-normal" for="rememberMe">
											Remember password ?
										</label>
									</div>
								</div>
							</div>
							<div class="col-xl-12 d-grid mt-2">
								<button type="submit" class="btn btn-lg btn-primary" disabled="@isLoading">
									@if (isLoading)
									{
										<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
										<span>Signing in...</span>
									}
									else
									{
										<span>Sign In</span>
									}
								</button>
							</div>
						</div>
					</EditForm>
					<div class="text-center">
						<p class="fs-12 text-muted mt-3">Dont have an account? <a href="SignUp" class="text-primary">Sign Up</a></p>
					</div>
				</div>
				<Aviv.Base.UI.Components.Shared.LoginFooter />
			</div>
		</div>
	</div>
</div>

@code {
	private LoginViewModel loginModel = new();
	private bool isLoading;
	private string? errorMessage;

	protected override async Task OnInitializedAsync()
	{
		// Check if user is already authenticated
		if (await AuthService.IsAuthenticatedAsync())
		{
			NavigationManager.NavigateTo("/dashboard");
		}
	}

	private async Task HandleValidSubmit()
	{
		try
		{
			isLoading = true;
			errorMessage = null;

			var result = await AuthService.LoginAsync(loginModel);

			if (result)
			{
				// Notify authentication state provider to update the state
				(AuthStateProvider as CustomAuthStateProvider)?.NotifyAuthenticationStateChanged();

				// Login successful
				await NotificationService.ShowSuccessAsync("Login successful!");
				NavigationManager.NavigateTo("/dashboard");
			}
			else
			{
				// Login failed
				errorMessage = "Invalid username or password. Please try again.";
				await NotificationService.ShowErrorAsync("Login failed. Please check your credentials.");
			}
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred during login. Please try again.";
			await NotificationService.ShowErrorAsync("Login error: " + ex.Message);
		}
		finally
		{
			isLoading = false;
		}
	}
}